{
  "version": 3,
  "sources": ["src/app/utils.ts", "src/app/features/website/games/games.component.ts", "src/app/features/website/games/games.component.html", "src/app/features/website/games/tournament/tournament.component.ts", "src/app/features/website/games/tournament/tournament.component.html", "src/app/features/website/games/challenge/challenge.component.ts", "src/app/features/website/games/challenge/challenge.component.html", "src/app/features/website/games/games-routing.module.ts"],
  "sourcesContent": ["export const colors: any = {\n  \"Salt\": \"rgba(0,60,255,0.50)\",\n  \"Sotcjiscjel\": \"rgba(255,221,0,0.50)\",\n  \"Vile\": \"rgba(0,0,0,0.50)\",\n  \"Somont\": \"rgba(37,195,0,0.50)\",\n  \"Surnins\": \"rgba(255,0,0,0.50)\",\n}\n", "import {Component} from '@angular/core';\nimport {Leaderboard} from \"../leaderboards/leaderboard\";\nimport * as scores from '../../../../assets/data/scores.json';\nimport {colors} from \"../../../utils\"\n\nclass Game{\n  name!: string;\n  type!: string;\n  leaderboard?: Leaderboard;\n}\n\n@Component({\n  selector: 'app-games',\n  templateUrl: './games.component.html',\n  styleUrl: './games.component.scss'\n})\nexport class GamesComponent {\n\n\n  getLeaderboard (game: string) {\n    if(!this.gameScores[game]['leaderboard']) return undefined;\n    return Leaderboard.fromScores(this.gameScores[game]['leaderboard'])\n  }\n\n  get gameScores () {return scores['game-scores'] as any}\n  games = Object.keys(this.gameScores);\n\n  tab = 'global'\n\n  protected readonly Leaderboard = Leaderboard;\n  protected readonly colors = colors;\n}\n", "<div class=\"w-full relative h-full overflow-hidden flex flex-col items-center gap-5\">\n  <p class=\"text-3xl font-bold p-2\">GIOCHI</p>\n  <div class=\"flex-col flex gap-1 w-full overflow-scroll p-1\">\n    @for (game of games; track game) {\n      <div class=\" w-full rounded-2xl p-5 backdrop-blur drop-shadow focus:bg-white/80\"\n           [routerLink]=\"['.', gameScores[game].type, game]\"\n           [style]=\"{'background-image': 'linear-gradient(to right, ' +\n           (getLeaderboard(game)?colors[getLeaderboard(game)!.getWinner().player]: 'rgba(160, 160, 160, 0.5) 0%')\n           + ', transparent 100%'} \"\n      >\n        <span class=\"flex justify-between\">\n                {{ game }}\n          <span class=\"material-icons-outlined\">keyboard_arrow_right</span>\n        </span>\n\n        @if (gameScores[game]['leaderboard']) {\n          <div class=\"flex items-end h-16 justify-between w-full mt-1 overflow-hidden \"\n          >\n            @for (participant of Leaderboard.fromScores(gameScores[game]['leaderboard']).getSortedParticipants(); track participant; let index = $index) {\n              <div class=\"flex flex-col items-center justify-center\"\n\n              >\n                <span>{{ index + 1 }}°</span>\n                <span>{{ participant.player }}</span>\n              </div>\n            }\n          </div>\n        }\n      </div>\n    }\n\n  </div>\n</div>\n", "import {Component, inject, OnInit} from '@angular/core';\nimport {ActivatedRoute,} from \"@angular/router\";\nimport * as scores from '../../../../../assets/data/scores.json';\nimport {Leaderboard} from \"../../leaderboards/leaderboard\";\nimport {colors} from \"../../../../utils\";\n\n\nclass TournamentGame {\n  name!: string;\n  rounds!: { players: string[], scores: number[] }[];\n  leaderboard!: Leaderboard;\n\n  constructor(name: string, rounds: any, leaderboard?: any) {\n    this.name = name;\n    this.rounds = rounds;\n    if (leaderboard)\n      this.leaderboard = Leaderboard.fromScores(leaderboard);\n  }\n\n}\n\n@Component({\n  selector: 'app-tournament',\n  standalone: true,\n  imports: [],\n  templateUrl: './tournament.component.html',\n  styleUrl: './tournament.component.scss'\n})\nexport class TournamentComponent implements OnInit {\n  activatedRoute = inject(ActivatedRoute)\n  game!: TournamentGame;\n\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe((params: any) => {\n      let game = (<any>scores)['game-scores'][params['gameName']]\n      this.game = new TournamentGame(params['gameName'], game['rounds'], game['leaderboard']);\n      console.log(this.game)\n    })\n  }\n\n\n  protected readonly colors = colors;\n}\n", "<div class=\"w-full relative h-full flex flex-col overflow-scroll pb-10 items-center gap-5 p-2\">\n  <p class=\"text-3xl font-bold p-2 text-center\">{{ game.name }}</p>\n\n  @if (game.leaderboard) {\n    <div class=\"flex w-full justify-between border-gray-600 border-4 bg-gray-300/20 backdrop-blur p-3 rounded-2xl\">\n      @for (participant of game.leaderboard.getSortedParticipants(); track participant; let index = $index) {\n        <div class=\"flex flex-col items-center justify-center\">\n          <span>{{ index + 1 }}°</span>\n          <span>{{ participant.player }}</span>\n        </div>\n      }\n    </div>\n  }\n\n  <div class=\"flex flex-col w-full gap-1\">\n    @for (round of game.rounds; track round) {\n      <div class=\"flex items-center justify-between p-2 rounded-2xl w-full backdrop-blur drop-shadow\"\n           [style]=\"{'background-image': 'linear-gradient(to right, ' + colors[round.players[0]] + '20%,rgb(120, 120, 120, 0.3) 50%,' + colors[round.players[1]]+'80%' } \"\n      >\n        <div class=\"flex-col flex w-1/3 items-center justify-between\">\n          <span class=\"text-xl font-bold text-center\">{{ round.players[0] }}</span>\n          <span>{{ round.scores[0] }}</span>\n        </div>\n        <div class=\"flex-col flex w-1/3 items-center justify-between\">\n          <span class=\"text-xl font-bold text-center\">{{ round.players[1] }}</span>\n          <span>{{ round.scores[1] }}</span>\n        </div>\n      </div>\n    }\n  </div>\n</div>\n", "import {Component, inject} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport * as scores from '../../../../../assets/data/scores.json';\nimport {Leaderboard} from \"../../leaderboards/leaderboard\";\nimport {colors} from \"../../../../utils\"\nimport {KeyValuePipe} from \"@angular/common\";\n\nclass ChallengeGame{\n  name!: string;\n  scores!: any;\n  leaderboard!: Leaderboard;\n\n  constructor(name: string, scores: any, leaderboard: any){\n    this.name = name;\n    this.scores = scores;\n    this.leaderboard = Leaderboard.fromScores(leaderboard);\n  }\n\n}\n\n@Component({\n  selector: 'app-challenge',\n  standalone: true,\n  imports: [\n    KeyValuePipe\n  ],\n  templateUrl: './challenge.component.html',\n  styleUrl: './challenge.component.scss'\n})\nexport class ChallengeComponent {\n  activatedRoute = inject(ActivatedRoute)\n  game!: ChallengeGame;\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe((params: any) => {\n      let game = (<any>scores)['game-scores'][params['gameName']]\n      this.game = new ChallengeGame(params['gameName'], game['scores'], game['leaderboard']);\n    })\n  }\n  protected readonly Leaderboard = Leaderboard;\n  protected readonly colors = colors;\n  protected readonly scores = scores;\n}\n", "<div class=\"w-full relative h-full overflow-hidden flex flex-col items-center gap-5 p-2\">\n  <p class=\"text-3xl font-bold p-2 text-center\">{{ game.name }}</p>\n\n  <div class=\"flex flex-col w-full gap-1\">\n\n    @for (participant of game.leaderboard.getSortedParticipants(); track participant; let index = $index) {\n      <div class=\"flex items-center justify-center p-2 rounded-2xl w-full\"\n           [style]=\"{'background-color': colors[participant.player] } \"\n      >\n        <span class=\"w-1/6 text-left text-xl\">{{ index + 1 }}°</span>\n        <span class=\"w-2/6 text-left text-xl\">{{ participant.player }}</span>\n        <span class=\"w-2/6 text-center text-xl\">{{ game.scores[participant.player] }}</span>\n        <span class=\"w-1/6 text-3xl text-right material-icons-outlined drop-shadow text-black\"\n\n              [class.text-yellow-500]=\"game['leaderboard'].getWinner().player === participant.player\"\n              [class.text-gray-500]=\"game['leaderboard'].getTopThree()[1].player === participant.player\"\n              [class.text-amber-700]=\"game['leaderboard'].getTopThree()[2].player === participant.player\"\n        >\n          emoji_events\n        </span>\n      </div>\n    }\n\n\n  </div>\n</div>\n", "import {NgModule} from \"@angular/core\";\nimport {Route, RouterModule} from \"@angular/router\";\nimport {GamesComponent} from \"./games.component\";\nimport {TournamentComponent} from \"./tournament/tournament.component\";\nimport {ChallengeComponent} from \"./challenge/challenge.component\";\n\n\nconst routes: Route[] = [\n  {\n    path: '',\n    component: GamesComponent,\n  },\n  {\n    path: 'tournament/:gameName',\n    component: TournamentComponent,\n  },\n  {\n    path: 'challenge/:gameName',\n    component: ChallengeComponent,\n  }\n]\n\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes),\n  ],\n  exports: [RouterModule],\n})\nexport class GamesRoutingModule {\n}\n"],
  "mappings": "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",
  "names": ["game-scores", "_c0", "game-scores", "_c0", "game-scores"]
}
